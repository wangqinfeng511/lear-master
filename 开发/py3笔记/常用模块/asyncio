asyncio	异步事件IO框架！
	 是基于AbstractEventLoop
	基类：BaseEventLoop
loop=asyncio.get_event_loop()
	async def test(number):
		print(number)
		await asyncio.sleep(20) #运行到此处允许挂起执行其他的task
task1=loop.create_task(1)
task2=loop.create_task(2) 
taske_list=asyncio.wait([task1,task2]) 创建task队列
loop.run_until_complete(taske_list) 运行task列表(任务)运行 
loop.run_forever() eventLoop循环运行
loop.stop() 停止
loop.close() 关闭事件监听循环
loop.is_closed() 是否关闭
loop.run_until_complete(loop.shudown_asyncgens()) 停止所有异步任务
	列：
	try:
		loop.run_forever()
	finally:
		loop.run_until_complete(loop.shudown_asyncgens())
		loop.close()
	
asyncio.run_coroutine_threadsafe(task,loop) 以线程的方式运行一个任务，一样用于运行中添加task任务