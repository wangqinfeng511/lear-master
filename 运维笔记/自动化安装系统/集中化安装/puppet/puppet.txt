与ansible一样，也是用来执行批量化安装服务，配置定制等，使用ruby语言研发。
安装：
	下载：http://yum.puppetlabs.com/el/6.5/products/x86_64/
	facter-1.7.3-1.el6.x86_64.rpm 用于获取主机的状态变量
	puppet-3.7.4-1.el6.noarch.rpm	
	yum -y --nogpgcheck puppet-3.7.4-1.el6.noarch.rpm
	epel源有
获取帮助：puppet describe --help
	  puppet describe -l 列出资源类型
	  puppet describe -s file 显示file的帮助
###############################################################################
puppet apply
	--noop 	:干跑一次
	--verbose	:显示详细信息
	--test	:测试模式
	--debug	:调试信息。
###############################################################################
常用资源类型：
	notify cron exec service file package group user
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
notify资源：
	常用属性：
		message " 信息"
例：vim notify.pp
	notify { 'ceshi'
		message => " 输出信息",
	}
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
cron资源：
	常用属性：
	ensure:目标状态：
			absent删除
			present 添加
	command:要执行的命令
	hour	:
	minute
	month
	monthday
	name		:名称
	special
	target
	user		#执行任务的用户
	weekday
	environment	#运行时的环境变量
	例：添加一个周期任务
	cron { 'message':
        	        minute => '*/10',
                	command => '/bin/echo "puppete"',
                	name => 'echo somet',
			ensure => present,
	}
	#crontab -l
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
exec 运行执行文件
	command (Namevar) :要执行命令：必顺幂等。
	creates	:此属性指定的文件不存在，时才执行此资源
	onlyif	:此属性指定的测试条件，返回成功码才执行此资源
	unless	:此属性指定的测试条件，返回错误码才执行此资源
	user	:此属性指定执行此资源的用户
	path	:指定环境变量，在指定目录查找此命令
	group	:用户组执行此命令
	cwd	:在此目录cd命令，在指定的路径下运行此命令
	refresh :刷新，如何刷新此资源:当此exec资源接收到其它事件通知时，默认是再执行一次资源，用于改变这种默认行为
	refreshonly :仅在收到refresh通知时，行执行此exec资源指定的命令。
	timeout	:超时时长
	tries	:尝试执行的次数

例：
	exec { 'test':
        	onlyif  => 'test -f /tmp/hello.puppet',
        	command => 'test -f /tmp/hello.puppet || echo "ok_file"',
        	path    => '/bin/:/usr/bin',
		}
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
file资源
	属性
	content	:直接给定文件内容。
	source	:复制此属性指定的文件为此file定义的文件内容。
	recurse	:传输整个目录：true|false，配合source复制目录。
	chechsum :指定使用哪种方式检查文件内容，是否发生改变。
	ctime	:
	mtime	:
	ensure	:是否存在文件类型，没有则创建。
		file.directory.link.present（创建），absent(删除)	
	target	:当ensure为link时，指明链接文件的源文件。
	force	:强制运行：是否
	owner	:属主
	group	:属组
	links	:复制如何处理链接文件
				follow
				ignore
	mode	:权限
	path	:新创建文件的目录
例：
file {'/tmp/mydir':
        ensure => directory, 
        }
file {'/tmp/mydir/test.txt':
        content => "hello_word!",
        ensure  => file,
        }
file {'/tmp/nginx.link':
        target =>'/etc/nginx/nginx.conf',
        ensure => link,
        }
file {'/home/':
        source => '/etc/nginx/',
        recurse => true,
        ensure =>directory,
        }

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
group 资源组
	常用属性
	name 组外namevar
	gid :GID
	ensure:目标状态：
		absent删除
		present 添加
	system	:是否为系统组
例：添加系统组
	group {'mysql1':
        	name =>'mysql1',
        	system => true,

		}
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
user	资源组
	常用属性：
	name:namevar
	comment	#注释
	ensure	#创建还是删除
		absent删除
		present添加
	expiry	#用户过期时间
	gid	#用户组指定
	groups	#附加组
	managehome	#是否创建用户时创建家目录。
	home	#指定家目录路径。
	shell	#默认使用的shell
	system	#是否为系统用户
	uid	#UID
	password #添加秘码
	password_max_age	#密码最大使用期限
	password_min_age	#密码最小使用期限
例：
	group {'mysql':
        	ensure => present,
        	system => true,
        	gid =>'306',
        	}->
	user {'mysql':
        	ensure => present,
        	uid     => '306',
        	gid     => '306',
        	groups => 'root',
        	system  => true,
        }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
资源依赖：
	defore ：当前资源必须在before属性指定的资源之前运行。
	require:  当前资源必须在require 属性指定的资源之后运行。
例：

	group {'mysql':
        	ensure => present,
        	system => true,
        	gid =>'306',
        	defore => User['mysql'],
        	}
	user {'mysql':
        	ensure => present,
        	uid     => '306',
        	gid     => '306',
       		groups => 'root',
        	system  => true,
       		require => Group ['mysql'],
        	}
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
触发器：
	notify	:在此资源发生变化后时，notify定义的资源也要运行一次
	subscribe:在此资源发生变化前，subscribe定义的资源要先运行一次。
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
package 程序包资源
	常用属性
	ensure:
		present安装
		absent删除
		latest 更新
	name: Namevar
	source	:程序包来源，
	provider:指明要使用的包管理器。
例：
	package {"nginx":
        	ensure =>present,
        	name => 'nginx.x86_64',
        	provider => 'yum',
        }

	package {"nginx":
        	ensure =>present,
       		provider => 'rpm',
		source => '/home/nginx.rpm'
        }

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
service 资源
	ensure :
		running,true| stopped,false
	enable	:是否开机自动启动。
	hasrestart:告诉pupet服务脚本是否运行使用“”restart|status” 参数
	name	:脚本名称。
	path	:脚本查找路径。
	pattern	:指明搜索服务相关进程的模式：用于不支持restart|status参数时帮助判定服务是否运行。
	start	:
	stop	:
	status	:状态。
例：

package {"nginx":
        ensure =>present,
        }
service {"nginx":
        ensure =>running,
        enable => true,
        }
Package['nginx']->Service['nginx']
File ['/etc/nginx.conf'] ~>Service['nginx']
#######################################################################puppet变量：
	布尔型：true|false
	字符型：
	数值型：
	数组：
	hash
正则表达式：
	例：$webpackage=$operatingsystem?{查看变量是否为下值
		/(?i-mx:ubuntu|debian)/=>'apche2', 变量结果匹配
		/(?i-mx:CentOS)/ =>'httpd',
		}
	#/(?i-mx:)/固定格式，i不区分大小写，－m不把.号当换行符。－x忽略模式中的空白字符和注释。
例1：
	$web=$operatingsystem? {
        	/(?i-mx:CentOS)/ => 'httpd',
	}
	notify {'web':
        	message => "$web",
        	}
	
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
puppet条件判断：
	if case, selector unless
例：if

	if $operatingsystem =~ /^(?i-mx:(CentOiS|RedHat))/ {
        	notice("$operatingsystem")
	}
	else{
        	notice ("努力吧王钦丰，为活下去")
	}
	
#notice()，puppet内置函数，用来输出信息。
#######################################################################
case语法：
例：case

case $osfamily{
        'RedHat','Fedora':{
                notice ("努力!")
                }
        'CentOS':{
                notice ("没疯就不能停！")
                }
        default:{
                notice ("断情断欲，为前程！")
                }
}
#######################################################################selector 选择器类case但返回对应的值

$web=$lsbdistid ?{
        "Ubuntu" => "努力",
        "CentOS" => "玩命努力，清心。",
        default => "快了，快了",
}
notify {'abc':
        message=>"$web",
        }
#######################################################################
class类
例：
class fengzi{
        case $osfamily{
        'RedHat','Fedora':{
                notice ("努力!")
                }
        'CentOS':{
                notice ("没疯就不能停！")
                }
        default:{
                notice ("断情断欲，为前程！")
                }
        }
}
include fengzi
类声明：
类的继承：
	class fengzi:: inherits base {
        
        			}
	include fengzi::base
带参数的类
	class mysql ("$conf=‘'/etc/nginx.cnf'){
		file {"$conf":
			
			}
	}
声明时带参数的类。
 class {'mysql'
 	conf => '/etc/mysql/my.cnf'
	}
#######################################################################
模版：基于ERB模版在静态文件中使用变量类ansible模版。
<%=@ipaddress%> 替换为执行后的结果
<% @变量名%>		只执行但不替换。
<%# 	%>		注释内容。
<%%	%>		转义符
<%-	%>		执行时忽略空白字符
<%     -%>		忽略空白行
变量转为整形：
	<%=integer (@变量名)%>
######################################################################
模块：
 文件结构 /etc/puppet/modules/
列出模块：
 puppet module list
搜索网络模块，
	puppet module search  nginx |puppet module install nginx

 	nginx
	    ├── files
	    ├── lib
	    ├── manifests
	    ├── spec
	    ├── templates
	    └── tests

 	manifests/:
		init.pp初始化清单：至少包含与当前模块名称同名的类。
	files:
		静态文件
		此文件夹有,nginx.conf
		访问路径：source=>puppet:///modules/nginx/nginx.conf
	lib:	
		插件目录
	templates
		模板文件件：
		访问路径：content=>template('nginx/nginx.conf.erb')
	tests
		当前模块使用帮助及示例文件。
	spec
		类似于tests目录，用于存储lib目录。
引用模块内的类：
	puppet apply -e "include nginx"

