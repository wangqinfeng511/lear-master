使用方法：
EXPLAIN select ....
列：
id:查询序号。
select_type:查询类型
	SIMPLE:	简单的select查询，不使用union（把两次查询结果合并起来）及子查询。
	PRIMARY：最外层的select查询。
	UNION	: UNION中的第二个或随后的select查询。不依赖外部查询的结果集。
	DEPENDENT UNTION :UNION中的第二个或随后的select查询。不依赖外部查询的结果集。
	SUBQUERY: 子查询的第一个select查询不依赖于外部查询集。
	DEPENDENT SUBQUERY :子查询中的第一个select查询，依赖于外部查询结果集。
	DERIVED	: #用于from子句里有子查询的情况。。mysql会递归，执行这些子查询，把结果放在临时表里。
	UNCACHEABLE SUBQUERY #结果集不能被缓存的子查询，必须重新为外层的每一次进行评估
	UNCACHEABLE UNION # UNION #中的第二个或随后的select查询属于不可缓存的子查询
table	:输出行所引用表。
type:	重要的项，显示连接使用的类型，按最优到最关的类型排序。
	system	：表仅一行（=系统表），这是const连接类型的一个特例。
	const	:const用于常数比较PRIMARY KEY时，当查询表公有一行时，使用system
	eq_ref	:const用于常数值比较PRIMARY KEY时，使有SYSTEM
	ref  :连接不能基于关键字，选择单个行，可能查找到多个符合条件的行。叫作ref是因为索引要跟某个参考值相比较。这个参考值或者是一个常数，或者是来自一个表里的多表查询的结果值。
	ref_or_null:
			如果ref,但mysql必须在初次查找的结果，里面找出null条目，然后进行二次查找。
	index_merge:
			索引合并优化被使用了。
	unique_subquery 
			在某些IN查询中使用此种类型而不常规的ref:value IN (select primary_key from single_table where some_expr)
	index_subquery
			在某些IN查询中使用此种类型，与unique_subquery类似，但是查询的百唯一性索引。value IN (select key_column FROM single_toble WHERE some_expr) 
	range 
			只检索给定范围的行，使用一个索引来选择行。key列显示使用了哪个索引。当使用=，<,>,<>,>=,<=,is NULL,<=>,BETWEEN或者IN操作符，常量比较关建字列时，可以使用range
	index
		:全表扫描的时候按照索引次序，进行面不是行。主要的优点就是避免了排序，但开销仍非常大。
	all
		:最坏情况，从头到尾全表扫描。
key:	
	mysql实际从possible_key选择使用的索引，如果为null，则null，没有使用索引。很少的情况下，MYSQL全选择优化不足的索引。这种情况下可以在select语名中使用，use index(index name) 来引制使用一个索引或者使用IGNORE INDEX(index name)来强制mysql忽略索引
key_len：
	使用索引的长度，在不损失精确性的情况下，长度越短越好。
ref:
	显示索引的哪一列被使用了。
rows:
	mysql认为必须检查的来返回请求数据的行数。
using filesort
	:表示mysql会对结果使用一个外部索引排序，而不是从表里按索引次序读到相关内容，可能在内存磁盘上进行排序，mysql中无法利用索引完成的排序操作称为“文件排序”
using temporary:
	表示mysql在对查询结果排序时使用临时表，常见于排序order by和分组查询groupby 
