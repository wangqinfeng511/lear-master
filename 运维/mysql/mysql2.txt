索引的作用：可以降低服务器查询扫描数据量。减少IO次数。
#########################################################################
mysql查询工作流程：
	用户－连接器－认证用户模块－－命令派发器\
						 |分析器>>
				  ｜－查询缓存  /
				  ｜－记录日志
	>>分析器－－优化器----\
		｜－表修改模块 \
		｜－表维护模块  \
		｜－复制模块     \
		｜－状态报告模块  \___访问控制模块－表管理模块－｜
			――――――――――――――――――――｜
		       ｜
		       存储引擎接口－〉mylsam
		       		|___> InnoDB

##########################################################################
索引模型：
	聚集索引｜非聚集索引
	主键索引、辅助索引
	稠密索引、稀疏索引
	B+RTREE：B加树索引
	**索引的作用加速查询速度。***
	对字段进行进行稠密索引，进行排序，再进行稀疏索引，
	－－－－－－－－－－－－－－－－－－－－－－－
       ｜		稠密索引		     ｜
	－－－－－－－－－－－－－－－－－－－－－－－
       ｜稀疏索引｜稀疏索引｜稀疏索引｜稀疏索引｜     ｜	
	－－－－－－－－－－－－－－－－－－－－－－－
	\a-c/	   \d-g/	........
地######################################################################
索引类型：
	B+Tree索引：顺序存储，每个叶子节点到根节点的距离是相同的。
	可使用B+Tree索引的类型：全键值，键值范围或前缀查找。
  适用于：全值匹配，精确某个值。
  	  匹配左前缀，只精确某个值。
	  匹配范围值。
	  精确匹配某一列并范围匹配另一列。
  不适用于：如果不从左列开始，索引无效。（Name Age）单查找Age字端索引无效。
  	   不能跳过索引中的列如（Name Age）
	   如查询中%feng%查询，此时索引无效。
	************
	hash索引
		适合：精确查找
		不适合：不支持顺序查找，不支持模糊查找。因为存的是hash值
	************
	R－Tree索引
		myisam支持空间索引
	************
	FULLEXT全文索引：
		在文本中找关建字。
高性能索引策略：
	不要让字段参与运算。
	左前缀索引
	多列索引
########################################################################
建立索引。
	CRATE INDEX
查看索引：
	SHOW INDEXES FROM 表名。
查看是否使用到索引：
	EXPLAIN 加查询语句：
	 例：
	 	EXPLAIN SELECT * FROM 表 WHERE 字端＝string\G;
	
	结查讲解：
		id:当前查询语句中第个SELECT语名的编号
		select_type:
			   简单查询：SIMPLE
			   复杂查询：SUBQUERY 简单的子查询。
			   	DERIVED 用于FORM中的子查询
				UNION  第一个SELECT
		type:关联类型，或访问类型既mysql决定如何查询。
			ALL 全表查询
			Index:根据索引次序进行全表扫描。
			range:有范围限制根据索引进行扫描。扫描始于一点止于一点
			ref:返回表中所有匹配某单个值的所有行
			ed_ref:仅返回一个行，但要与某个参考值作比较。
			const :直接反回一个行。
		possible_keys:查询可能用到的索引。
		key	     :查询中使用到的索引。
		key_len:     :在索引中使用到第几个字节数匹配到的。
		ref:	     ：在利用key字端所表示的索引完成所用到的字端
		rows: 估计为找到目标行需要读取的行数。
		Extra:额外信息：
			using index MYSQL将会使用覆盖索引，以避免访问表。
			using where
			using temporary:排序时会用到临时表。
			using filesort:对结果使用一个外部索引排序。
#########################################################################
视图：VIEN
	虚表：对表进行查询，创建视图。
	创建：CREATE VIEW 表名AS SELECT 字段1，字段2.……
	删除：DROP VIEW
#########################################################################
mysql 缓存
	查看是否打开缓存；
	SHOW GLOBAL VARIABLES LIKE 'guery%';
	  结果：
	  	guery_cache_size 缓存大小
		guery_cache_type ON|OFF|DEMAND：按需缓存。
	在查询时加
		SQL_NOCACHE此次查询不要缓存。
		SQL_CACHE 此次进行缓存。
	查看是否命中缓存：
		SHOW GLOBAL STATUS LIKE 'Qcache%'
			结果：
		Qcache_hits 命中次数。
		Com_select  查询次数。相除是命中率。
##########################################################################
 MYSQL日志：
 	日志分类：
		查询日志。
		慢查询日志。
		错误日志。
		二进制日志。
		中继日志。
		事务日志。
	查询日志变量：SHOW GLOBAL VARIABLES LIKE '%log%';
	查询日志：log_output={TABLE|FILE|NONE}：哪种方式记录日志。
		 general_log ={on|off} 是否启用查询日志
		 general_file=www.log 以FILE方式记录日志的路径。
	慢查询日志：SELECT @@GLOBAL.long_query_time;
		  long_guery_time=2  #秒查询超长时长值。
		  是否启用慢查询日志。
		  slow_query_log=/path/to/....#配置文件定义日志路径。
			slow-query-log-file= #5.6更好为此名称
		log-queries-not-using-indexes #没有使用索引的查询也记录为慢查询
		  log_slow_filter:定义过滤器。
		  log_slow_rate_limit=限制速率。
		  log_slow_verbosity={on|off}打开详细日志。
	set global slow_query_log = ON #开启慢查询
	错误日志：log_error
		mysqld 启动和关闭过程中输出的信息。
		mysqld 运行中产生的错误信息。
		event scheduler 事件调度器启动维护计划。
		log_warnings={on|off} 是否把警告信息与错误日志中。
	二进制日志：数据库目录下mysql_bin.001...
		   保存数据库修改操作。
		  查看服务器端处于由mysqld维护的二进制文件。
		  	SHOW BINARY LOGS 
		查看二进制日志
		 #mysqlbinlog mysql_bin.0001
		 	－j:从指定事件位开始查看。
			--stop-position 事件结束位。
			--start-datetime=name 起始时间
			--stop-datetime=name结束时间
					YYYY-MM-DD hh:mm:ss
			-u -h -p 跟mysql一样。
		 SHOW BINLOG EVENTS IN 'mysql_bin.001'
		滚动日志一次：
		 FLUSH LOGS
	二进制日志格式定义：
			查看当前日志号:show master status
		 	分为：基于“语名”记录。
				基于“行”记录。可防止交易时间问题。
				基于“混合”模式。mysql自行判定记录方式。
			变量定义：
			 SET SESSION sql_log_bin=1 开启二进制日志。
			 log_bin={on|off} 开启二进制功能。
			 binlog_format=MIXED 混合模式
			 		statement 语名模式
					row 	行
			sql_log_bin={on|off} 控制是否启用二进制日志。
			max_binlog_size	     超过多少进行滚动。
			max_binlog_cache_size缓存空间大小。
			sync_binlog_stmt_cache_size 语句缓存大小。
			sync_binlog=0 是否事务提交时同步于日志文件中。
					任何正值表示记录多少语句同步一次。
	二进制日志格式：
		事件发生的时间。
		事件发生在服务器的标长 server id
		事件的结束位置		end_log_pos 459
		事件所属的事务ID	(GTID 0-1-2)唯一。
		事件的操作事件
		束件的类型	Query
		事件发生时所在的服务器执行此事件的线程ID thread_id =13
		事件的执行时长	exec_time
		错误代码	error_code=0正常执行。

	事务日志：(innodbd存储引擎)
		innodb_log_group_home_dir 定义日志文件组目录。
		innodb_log_file_size	  单个事务日志文件大小。
		innodb-mirrored_log_groups 事务日志组镜像个数1表示无。
		innodb-flush-log-at-trx-commig:事务提交时立即同步至日志。
###########################################################################
备份与恢复
	备份类型：
		热备，冷备，温备。
		物理备份，逻辑备份
	myisam:支持到温备
	innodb:支持到热备级别。
    	备份哪些？
		数据，二进制日志，代码（存储过程和存储函数，触发器，事件调度器，服务器配置文件）。
	备份方案：
		mysqldump 支持到温备，适用所有引擎，innodb支持到热备。+二进制日志。
		cp,tar    物理备份。
		lvm2的快照：几乎热备+二进制日志
		ibackup   热备工具，商业版支持innodb
		xtrabaceup	对innodb支持热备，支持增量备份。
				对myisam引擎温备，只支持完全备份。
		
