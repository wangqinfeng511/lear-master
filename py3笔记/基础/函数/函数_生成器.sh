函数：
定义：组织好的，可重用的，功能单一的。
性质：输入　输出。
存储方式：值保存在栈空间，引用保存在堆空间中。
作用域：
	函数是python最小作用域中。
	全域作用域－>函数之外的，参数列表里的（但名子不是函数参数的名）
	函数作用域－>函数内定义的。

定义：def fn (x):
	pass
	return #函数只能返回一个值，如果后面有逗号分隔的值，会自动的封包在一个元组。可以有多个return但只会执行一个。
函数流程：
	内存分区：堆，栈，指令区，静态区，保留区。
	堆：	随机访问，用于保存数据。
	栈：	先进后出，用于保存现场（就是当前命名空间的地址）
	指令区：顺序访问，用于存储程序指令。
###############################################################################
可变位置参数：不知道有多少个参数。
	def fn(*age):
		print(age)
	fn('a',1,2,3,4,5,'dafds')
可变关键字参数：可变关键字参数，使用**定义，在函数体内，可变关键字参数是个字典。	def fn(**kwargs):
		print(kwargs)
	fn({'a':1,'b':2,'c':3,'d':4})
混合使用：
	def fn(*a,**dice):
		print(a,dice)
	#a是个列表，dice字典。
###############################################################################
参数棤(命名参数)：
	def fn(a,b,*,c):
		print(a,b,c)
	＃c必须以关键字参数的形式传递。
	例：fn(1,2,c=3)
类形示意python3.5才有：
	def add(x:int,y:int)->int:
		return x+y　＃ 只是用来描述。
	#help(add) #输出定义的方式。
#############################################################################
函数递归。
	def fid(n):
		if n==0:
			return 1
		if n==1:
			return 1
		return fid(n-1)+fid(n-2)
	#函数内调用自身，就是递归。例如fid(n-1)因为反复调用自己，所以很容易进入死徇环。每次调用fid函数都会把函数压入𣏾中。
函数的递归的层次默认为１０００次。
查看递归最大次数：
	import sys
		sys.getrecursionlimit() #输出递归深度次数。
		sys.setrecursionlimit(2000) #设置递归深度值。
#############################################################################
生成器：
	def gen():
		yield 0 #生成器返回值。
	g=gen()
	next(g) #取值。
		#与函数区别在于yield。
 #生成器的定义和函数类似，但是有yield语句，生成器执行到yield时候会暂停，下次next时会继续执行。
 yield，弹出值，暂停函数。return返回值，并且结束函数。当yield和return同时存在时,return 的返回值会被怱略，但return 依然可以结束生成器。

 生成器应用：
 	def counter(init):
		c=init
		while True:
			yield c
			c+1
	c=counter(0)
	next(c) #会－直输出。
