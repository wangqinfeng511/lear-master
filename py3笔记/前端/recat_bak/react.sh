react是一个前端框架，更像一个状态机，因为它把每个-个或多个元素的打包在一个DOM作为虚拟组件，再通过reactdom.render（）方法与html内的Div作关连，实现jsx转html的工作。
为什么说更像是一个状态机呢？因为每个要改变的元素都需要一个状态来通知浏览进行元素的重新加载。比如说<button>定义了单击事件，打把<input>输入的值打印到页面，但又不要执行全页加载。这时我们就需要一个方法让改变的元素的状态值，来让此元素重新加载此元素的值。
react：就是实现了以状态加载元素的实现而已。

#####################################################################################################################################
		生命周期
############################################################################
react生命周期：								   #							
	render() 此函数为组件定义必须的。它体内用来定义反回的虚拟DOM。     #
	componetWillMount() ：钩子函数生命同期内只执行一次，执行时机：在组件渲染之前执行。也就是说可以用来放一些组件的初始值。
	componetDidMount(): 在挂载之后执行一次。			   #
#########################################################################  #
react更新周期：								   #
componentWillReceiveProps() #当组件接收到新的props(这里不同于state）时，会触发该函数。
componentshouldUpdate() #此函数用来判断是否需要更新，返回布尔值。	   #
componentWillUpdate() #执行重新渲染。					   #
componentDidUpdate() #挂载之后执行.					   #
componentWillUmount() #退出后执行一般用来作清理工作。			  
#生命周期只不过是一些hosk函数，这些钩子函在react组件的各种时机作一些额外操作#
###########################################################################
state:状态。值为map，只能在组件内部使用。
使用方法 this.state={a:value} ,比如在<input onChange={e=>this.setState(a:e.taget.value)}>.来取出输入的值。e.taget.value是取出input value值。
props:定义属性，以方便在子组件（在组件内使用这个组件的组件）内方便例用此组件的操作。
使用方法：this.props.adue 这样我们就定义了一个叫adue的属性，比如这个定义在A组件内，我们在它的子组件内可以这样使用它<A adue="hello word">
#############################################################################
react 自带组件：
	react.PropTypes.string.isRequired
	限制类型。      字符.不可为空
			func 方法
	.bind(this) 改变this指向。
